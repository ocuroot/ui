// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.920
package main

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"github.com/ocuroot/ui/components/navbar"
)

// ShowcaseNavbar creates a consistent navbar for all showcase pages
func ShowcaseNavbar(activePage string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = navbar.Navbar(navbar.NavbarConfig{
			BrandName: "Ocuroot",
			BrandURL:  "/",
			LogoURL:   "/static/logo.svg",
			Items: []navbar.NavItem{
				navbar.NavLink{
					Name:   "Modal Components",
					URL:    "/modal",
					Active: activePage == "modal",
				},
				navbar.NavLink{
					Name:   "Table Components",
					URL:    "/table",
					Active: activePage == "table",
				},
				navbar.NavLink{
					Name:   "Docs",
					URL:    "/docs/intro",
					Active: activePage == "docs",
				},

				navbar.NavDropdown{
					ID:   "showcase",
					Name: "Showcase",
					Items: []navbar.DropdownItem{
						{Name: "Tabs", URL: "/components#tabs"},
						{Name: "Badges", URL: "/components#badges"},
						{Name: "Hero Sections", URL: "/components#hero"},
						{Name: "Progress", URL: "/components#progress"},
						{Name: "Links", URL: "/components#links"},
						{Name: "Icons", URL: "/components#icons"},
						{Name: "Forms", URL: "/components#forms"},
					},
				},
				navbar.NavLink{
					Name:   "All Components",
					URL:    "/components",
					Active: activePage == "components",
				},
			},
			ShowThemeToggle: true,
			ShowUserMenu:    false,
		}).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
