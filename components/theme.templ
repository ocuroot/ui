package components

// Theme toggle component
templ ThemeToggle() {
	@ThemeToggleScript()
	<button 
		id="theme-toggle"
		class="p-2 rounded-lg bg-surface border hover:bg-secondary transition-colors duration-200"
		aria-label="Toggle theme"
		onclick="toggleTheme()"
	>
		<svg id="theme-toggle-dark-icon" class="w-5 h-5 text-primary" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
			<path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"></path>
		</svg>
		<svg id="theme-toggle-light-icon" class="w-5 h-5 text-primary hidden" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
			<path fill-rule="evenodd" d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z" clip-rule="evenodd"></path>
		</svg>
	</button>
}

var themeToggleHandle = templ.NewOnceHandle()

templ ThemeToggleScript() {
	@themeToggleHandle.Once() {
		<script>
			function toggleTheme() {
				const theme = localStorage.getItem('theme');
				const newTheme = theme === 'dark' ? 'light' : 'dark';
				
				localStorage.setItem('theme', newTheme);
				document.documentElement.setAttribute('data-theme', newTheme);
				
				updateThemeIcon(newTheme);
			}
			
			function updateThemeIcon(theme) {
				const darkIcon = document.getElementById('theme-toggle-dark-icon');
				const lightIcon = document.getElementById('theme-toggle-light-icon');
				
				if (theme === 'dark') {
					darkIcon.classList.add('hidden');
					lightIcon.classList.remove('hidden');
				} else {
					darkIcon.classList.remove('hidden');
					lightIcon.classList.add('hidden');
				}
			}
			
			// Initialize theme on page load
			function initTheme() {
				const savedTheme = localStorage.getItem('theme');
				const systemTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
				const theme = savedTheme || systemTheme;
				
				document.documentElement.setAttribute('data-theme', theme);
				updateThemeIcon(theme);
			}
			
			// Initialize theme when DOM is ready
			if (document.readyState === 'loading') {
				document.addEventListener('DOMContentLoaded', initTheme);
			} else {
				initTheme();
			}
			
			// Listen for system theme changes
			window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
				if (!localStorage.getItem('theme')) {
					const theme = e.matches ? 'dark' : 'light';
					document.documentElement.setAttribute('data-theme', theme);
					updateThemeIcon(theme);
				}
			});
		</script>
	}
}