package form

import "fmt"

type FormProps struct {
	Title  string
	Method string
	Submit SubmitProps
}

templ Form(props FormProps) {
	<form method={ props.Method }>
		<div class="box-border w-6/12 p-4 border-2 mx-auto">
			<div class="text-xl font-bold">{ props.Title }</div>
			<div class="border-b border pb-6">
				{ children... }
			</div>
			@Submit(props.Submit)
		</div>
	</form>
}

type SubmitProps struct {
	Title      string
	CancelText string
	CancelPath string
}

templ Submit(props SubmitProps) {
	<div class="mt-6 flex items-center justify-end gap-x-6">
		<a href={ templ.SafeURL(props.CancelPath) } class="text-sm font-semibold leading-6 text-primary">
			if props.CancelText == "" {
				Cancel
			} else {
				{ props.CancelText }
			}
		</a>
		<button
			type="submit"
			class="flex items-center justify-center rounded-lg bg-secondarycolor px-5 py-2.5 text-sm font-medium text-white hover:bg-secondarycolor/90 focus:outline-none focus:ring-4  focus:ring-secondarycolor/50"
		>
			if props.Title == "" {
				Save
			} else {
				{ props.Title }
			}
		</button>
	</div>
}

templ SectionHeading(title, description string) {
	<div class="mt-4">
		<h2 class="text-base font-semibold leading-7 text-primary">{ title }</h2>
		<p class="mt-1 text-sm leading-6 text-secondary">{ description }</p>
	</div>
}

templ TextField(label string, name string, value string) {
	<div class="mt-6 grid grid-cols-1 gap-x-6 gap-y-8 sm:grid-cols-6">
		<div class="sm:col-span-6">
			<label for={ name } class="block text-sm font-semibold leading-6 text-primary">{ label }</label>
			<div class="mt-2">
				<div class="flex rounded-md shadow-sm ring-1 ring-inset ring-gray-300 focus-within:ring-2 focus-within:ring-inset focus-within:ring-indigo-600 sm:max-w-md">
					<input type="text" name={ name } id="environment_name" autocomplete={ name } value={ value } class="block flex-1 border-0 bg-transparent py-1.5 pl-3 text-primary placeholder:text-muted focus:ring-0 sm:text-sm sm:leading-6"/>
				</div>
			</div>
		</div>
	</div>
}

templ StaticText(label string, value string) {
	<div class="mt-6 grid grid-cols-1 gap-x-6 gap-y-8 sm:grid-cols-6">
		<div class="sm:col-span-6">
			<label class="block text-sm font-semibold leading-6 text-primary">{ label }</label>
			<div class="mt-2">
				<div class="flex">
					{ value }
				</div>
			</div>
		</div>
	</div>
}


type DropdownOption struct {
	Value string
	Text  string
}

type DropdownListProps struct {
	Label   string
	Name    string
	Options []DropdownOption
}

templ DropdownList(props DropdownListProps) {
	<div class="mt-6 inline-block w-full text-primary">
		<label
			for={ fmt.Sprintf("dropdown-%s", props.Name) }
			class="block text-sm font-medium leading-6 text-primary"
		>
			{ props.Label }
		</label>
		<select name={ props.Name } id={ fmt.Sprintf("dropdown-%s", props.Name) } class="w-full px-4 py-2 pr-8 leading-tight text-primary bg-secondary border rounded appearance-none focus:outline-none focus:bg-surface">
			<option value="">Select an option</option>
			for _, option := range props.Options {
				<option value={ option.Value }>
					{ option.Text }
				</option>
			}
		</select>
		<div class="absolute inset-y-0 right-0 flex items-center px-2 pointer-events-none">
			<svg class="w-4 h-4 fill-current" viewBox="0 0 140 140" xmlns="http://www.w3.org/2000/svg">
				<path d="m71.6 18.7c-2.5 0-4.9 1.6-6.3 4 1.4-2.4 3.8-4 6.3-4 3.3 0 6 2.7 6 6 0 3.3-2.7 6-6 6-1.4 0-2.8-.6-3.8-1.6zm0 116.2c-3.3 0-6-2.7-6-6 0-3.3 2.7-6 6-6 1.4 0 2.8.6 3.8 1.6 1.4-2.4 3.8-4 6.3-4 2.5 0 4.9 1.6 6.3 4-1.4 2.4-3.8 4-6.3 4-3.3 0-6-2.7-6-6z"></path>
			</svg>
		</div>
	</div>
}